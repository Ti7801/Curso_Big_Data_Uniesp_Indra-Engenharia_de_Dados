#!/bin/bash

echo "Comando para entrar no container spark:"

docker.exe exec -it spark bash

echo "Carregar os packages com as classes de leitura de arquivos CSVs ao abrir o spark-shell:"

spark-shell –packages com.databricks:spark-csv_2.10:1.5.0


echo "Comando para ler os arquivos do HDFS e salvar nos dataframes"

val dataframe_clientes = spark.read.option("delimiter",";").option("header","true").option("inferSchema","true").csv("/dados_processamento/dados/CLIENTES.csv")

val dataframe_divisao = spark.read.option("delimiter",";").option("header","true").option("inferSchema","true").csv("/dados_processamento/dados/DIVISAO.csv")

val dataframe_endereco = spark.read.option("delimiter",";").option("header","true").option("inferSchema","true").csv("/dados_processamento/dados/ENDERECO.csv")

val dataframe_regiao = spark.read.option("delimiter",";").option("header","true").option("inferSchema","true").csv("/dados_processamento/dados/REGIAO.csv")

val dataframe_vendas = spark.read.option("delimiter",";").option("header","true").option("inferSchema","true").csv("/dados_processamento/dados/VENDAS.csv")


echo "Questao 4"
echo "CRUZAMENTO DE DADOS PARA SUBSTITUIR 1 POR International E 2 POR Domestic"

dataframe_clientes.withColumn("Division", when(dataframe_clientes("Division") === "1","International").when(dataframe_clientes("Division") === "2","Domestic").otherwise("Não Informado")).show()


echo "CRUZAMENTO DE DADOS SUBSTITUIR A NÚMERAÇÃO PELO NOME DA REGIÃO:"

dataframe_clientes.withColumn("Region Code", when(dataframe_clientes("Region Code") === "0","Canada")
.when(dataframe_clientes("Region Code") === "1","Western")
.when(dataframe_clientes("Region Code") === "2","Southern")
.when(dataframe_clientes("Region Code") === "3","Northeast")
.when(dataframe_clientes("Region Code") === "4","Central")
.when(dataframe_clientes("Region Code") === "5","International")
.otherwise("Não Informado")).show()

echo "Questao 5"
echo "Quantos pedidos foram realizados:"

dataframe_VENDAS.count()

echo "Quantos clientes tem em nossa base:"

dataframe_clientes.count()


echo "Quantos clientes temos por Região:"

val clientes = dataframe_clientes.withColumn("Region Code", when(dataframe_clientes("Region Code") === "0","Canada")
      .when(dataframe_clientes("Region Code") === "1","Western")
      .when(dataframe_clientes("Region Code") === "2","Southern")
      .when(dataframe_clientes("Region Code") === "3","Northeast")
      .when(dataframe_clientes("Region Code") === "4","Central")
      .when(dataframe_clientes("Region Code") === "5","International")
      .otherwise("Não Informado"))

echo "Canada"

clientes.filter(clientes("Region Code") === "Canada").count()

echo "Western"

clientes.filter(clientes("Region Code") === "Western").count()

echo "Southern"

clientes.filter(clientes("Region Code") === "Southern").count()

echo "Northeast"

clientes.filter(clientes("Region Code") === "Northeast").count()

echo "Central"

clientes.filter(clientes("Region Code") === "Central").count()

echo "International"

clientes.filter(clientes("Region Code") === "International").count()



